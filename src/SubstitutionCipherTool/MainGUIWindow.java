/**
 * Author : Wesley Kelly
 */
package SubstitutionCipherTool;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import java.math.*;


/**
 *
 * @author WesKellyPC
 */
public class MainGUIWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainGUIWindow
     */
    public MainGUIWindow() {
        initComponents();
        
        calibrationFile = null;
        cipherFile = null;
        
        FileSelector.setDialogTitle("Select File");
        this.setTitle("Substitution Cipher Tool - Wesley Kelly, James Von Eiff");
        
        calibrationValues = new double[26];
        for (int i = 0; i < 26; i++) {
            calibrationValues[i] = 0.0;
        }
        
        alphabet = new char[26];
        
    }
    
    private File calibrationFile;
    private File cipherFile;
    private double[] calibrationValues;
    private char[] alphabet;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileSelector = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        CalibrationFileSelectorLabel = new javax.swing.JLabel();
        SelectCalibrationFileButton = new javax.swing.JButton();
        CipherFileSelectorLabel = new javax.swing.JLabel();
        SelectCipherFileButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CalibrateButton = new javax.swing.JButton();
        CipherFileDataField = new javax.swing.JTextField();
        CalibrationDataLabel = new javax.swing.JLabel();
        CipherFileDataLabel = new javax.swing.JLabel();
        DecipherButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CalibrationDataFieldLabel = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        FileSelector.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        FileSelector.setCurrentDirectory(new java.io.File("D:\\Dropbox\\Cedarville\\2-Sophomore\\Spring 2015\\Computer Security\\Programming Projects\\Proj 1\\shakespeare_cipher.txt"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setName("Substitution Cipher Cracker"); // NOI18N

        CalibrationFileSelectorLabel.setText(" ");
        CalibrationFileSelectorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        SelectCalibrationFileButton.setText("Select Calibration File...");
        SelectCalibrationFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectCalibrationFileButtonActionPerformed(evt);
            }
        });

        CipherFileSelectorLabel.setText("  ");
        CipherFileSelectorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        SelectCipherFileButton.setText("Select Cipher File...");
        SelectCipherFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectCipherFileButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Calibration File");

        jLabel2.setText("Cipher File");

        CalibrateButton.setText("Calibrate");
        CalibrateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibrateButtonActionPerformed(evt);
            }
        });

        CalibrationDataLabel.setText("Cal freq:");

        CipherFileDataLabel.setText("Cipher File Raw Data:");

        DecipherButton.setText("Decipher");
        DecipherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecipherButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        CalibrationDataFieldLabel.setEditable(false);
        CalibrationDataFieldLabel.setColumns(20);
        CalibrationDataFieldLabel.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        CalibrationDataFieldLabel.setRows(4);
        CalibrationDataFieldLabel.setTabSize(4);
        CalibrationDataFieldLabel.setAutoscrolls(false);
        jScrollPane1.setViewportView(CalibrationDataFieldLabel);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel3.setText("Cipher freq:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CalibrationFileSelectorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CipherFileSelectorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SelectCalibrationFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SelectCipherFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CalibrateButton)
                            .addComponent(DecipherButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CalibrationDataLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CipherFileDataField, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CipherFileDataLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SelectCalibrationFileButton)
                        .addComponent(CalibrateButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CalibrationFileSelectorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1))
                        .addGap(3, 3, 3)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CipherFileSelectorLabel)
                    .addComponent(SelectCipherFileButton)
                    .addComponent(jLabel2)
                    .addComponent(DecipherButton))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CalibrationDataLabel)
                    .addComponent(CipherFileDataLabel)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CipherFileDataField, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CalibrateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibrateButtonActionPerformed
        if (calibrationFile != null) {
            try {
                Scanner line = new Scanner(calibrationFile);
                
                int countTotalChars = 0;
                while (line.hasNext()) {
                    String nextLine = line.next();
                    for (int i = 0; i < nextLine.length(); i++) {
                        if (Character.isLetter(nextLine.charAt(i))) {
                            countTotalChars++;
                            calibrationValues[Character.toUpperCase(nextLine.charAt(i)) - 'A']++;
                            alphabet[Character.toUpperCase(nextLine.charAt(i)) - 'A'] = Character.toUpperCase(nextLine.charAt(i));
                        }
                    }
                }
                String calTextFieldAppend = new String();
                String nbsp = System.getProperty("line.separator");
                
                sortyByRelativeFrequency();
                
                for (int i = 0; i < 26; i++) {
                    calibrationValues[i] = calibrationValues[i] / countTotalChars;
                    calTextFieldAppend += (alphabet[i] + ": " + String.format("%.4f",calibrationValues[i]) + nbsp);
                }
                
                CalibrationDataFieldLabel.setText(calTextFieldAppend);
            }
            catch (FileNotFoundException ex) {
                System.out.println("File not found: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_CalibrateButtonActionPerformed
    
    private void sortyByRelativeFrequency() {
        double tempDoub;
        char tempChar;
        
        for (int i = 0; i < 26; i++) {
            for (int j = i + 1; j < 26; j++) {
                if (calibrationValues[j] > calibrationValues[i]) {
                    
                    tempDoub = calibrationValues[i];
                    calibrationValues[i] = calibrationValues[j];
                    calibrationValues[j] = tempDoub;
                    
                    tempChar = alphabet[i];
                    alphabet[i] = alphabet[j];
                    alphabet[j] = tempChar;
                }
            }
        }
    }
    
    private void SelectCipherFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectCipherFileButtonActionPerformed
        if (FileSelector.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            this.cipherFile = FileSelector.getSelectedFile();
            CipherFileSelectorLabel.setText(this.cipherFile.getName());
        }
        FileSelector.setVisible(true);
    }//GEN-LAST:event_SelectCipherFileButtonActionPerformed

    private void SelectCalibrationFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectCalibrationFileButtonActionPerformed
        if (FileSelector.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            this.calibrationFile = FileSelector.getSelectedFile();
            CalibrationFileSelectorLabel.setText(this.calibrationFile.getName());
        }
        FileSelector.setVisible(true);
    }//GEN-LAST:event_SelectCalibrationFileButtonActionPerformed

    private void DecipherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecipherButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DecipherButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUIWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CalibrateButton;
    private javax.swing.JTextArea CalibrationDataFieldLabel;
    private javax.swing.JLabel CalibrationDataLabel;
    private javax.swing.JLabel CalibrationFileSelectorLabel;
    private javax.swing.JTextField CipherFileDataField;
    private javax.swing.JLabel CipherFileDataLabel;
    private javax.swing.JLabel CipherFileSelectorLabel;
    private javax.swing.JButton DecipherButton;
    private javax.swing.JFileChooser FileSelector;
    private javax.swing.JButton SelectCalibrationFileButton;
    private javax.swing.JButton SelectCipherFileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
